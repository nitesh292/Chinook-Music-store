-- 1. What is the total revenue generated by all sales?
SELECT 
    SUM(unitprice * quantity) AS total_revenue
FROM
    invoiceline;

-- 2. What is the total revenue generated by each city?
SELECT 
    billingcity AS city,
    SUM(inl.quantity * inl.unitprice) AS total_revenue
FROM
    invoice i
        JOIN
    invoiceline inl ON i.invoiceid = inl.invoiceid
GROUP BY city
ORDER BY total_revenue DESC;

-- 3. Which genres generate the most revenue, and how does their performance vary across countries?
SELECT 
    g.name AS genre,
    i.billingcountry AS country,
    SUM(inl.unitprice * inl.quantity) AS revenue
FROM
    genre g
        JOIN
    track t ON g.genreid = t.genreid
        JOIN
    invoiceline inl ON t.trackid = inl.trackid
        JOIN
    invoice i ON i.invoiceid = inl.invoiceid
GROUP BY g.name, i.billingcountry
ORDER BY g.name, revenue DESC;

-- 4. What is the top 5 total revenue generated by album?
SELECT 
    a.title AS album_title,
    SUM(inl.quantity * inl.unitprice) AS total_revenue
FROM
    album a
        JOIN
    track t ON a.albumid = t.albumid
        JOIN
    invoiceline inl ON inl.trackid = t.trackid
GROUP BY a.title
ORDER BY total_revenue DESC
LIMIT 5;

-- 5. How has monthly revenue changed over the past three years, and what are the significant seasonal patterns or trends?
WITH revenue AS (
    SELECT 
        YEAR(i.invoicedate) AS year,
        MONTH(i.invoicedate) AS month,
        SUM(inl.quantity * inl.unitprice) AS monthly_revenue
    FROM
        invoice i
        JOIN invoiceline inl ON i.invoiceid = inl.invoiceid
    GROUP BY year, month
)
SELECT 
    year,
    month,
    monthly_revenue,
    LAG(monthly_revenue) OVER (ORDER BY year, month) AS prev_month_rev,
    monthly_revenue - LAG(monthly_revenue) OVER (ORDER BY year, month) AS revenue_change
FROM
    revenue
ORDER BY year, month;

-- 6. How does revenue vary across the days of the week?
SELECT 
    DAYNAME(i.invoicedate) AS day_of_week,
    SUM(inl.quantity * inl.unitprice) AS revenue
FROM
    invoice i
        JOIN
    invoiceline inl ON i.invoiceid = inl.invoiceid
GROUP BY day_of_week
ORDER BY revenue DESC;

-- 7. Who are the top 5 customers in terms of total purchases?
SELECT 
    c.customerid,
    CONCAT(c.firstname, ' ', c.lastname) AS name,
    SUM(il.quantity) AS total_purchase
FROM
    customer c
        JOIN
    invoice i ON c.customerid = i.customerid
        JOIN
    invoiceline il ON i.invoiceid = il.invoiceid
GROUP BY c.customerid, CONCAT(c.firstname, ' ', c.lastname)
ORDER BY total_purchase DESC
LIMIT 5;

-- 8. Which customers have not made a purchase in the last year?
SELECT 
    CONCAT(c.firstname, ' ', c.lastname) AS name
FROM
    customer c
WHERE
    c.customerid NOT IN (
        SELECT DISTINCT i.customerid
        FROM invoice i
        WHERE i.invoicedate > (SELECT MAX(invoicedate) - INTERVAL 1 YEAR FROM invoice)
    );

-- 9. What is the total number of customers assigned to each employee?
SELECT 
    e.employeeid, COUNT(c.customerid) AS total_customer
FROM
    customer c
        LEFT JOIN
    employee e ON c.supportrepid = e.employeeid
GROUP BY e.employeeid;

-- 10. Which employee generates the most revenue?
SELECT 
    CONCAT(e.firstname, ' ', e.lastname) AS employee_name,
    SUM(il.unitprice * il.quantity) AS total_revenue
FROM
    employee e
        JOIN
    customer c ON e.employeeid = c.supportrepid
        JOIN
    invoice i ON c.customerid = i.customerid
        JOIN
    invoiceline il ON i.invoiceid = il.invoiceid
GROUP BY e.employeeid, employee_name
ORDER BY total_revenue DESC
LIMIT 1;

-- 11. Which is the most sold track in terms of quantity?
SELECT 
    t.name, SUM(il.quantity) AS total_quantity_sold
FROM
    track t
        JOIN
    invoiceline il ON t.trackid = il.trackid
GROUP BY t.name
ORDER BY total_quantity_sold DESC
LIMIT 1;

-- 12. What are the top 3 most popular genres by total track sales?
SELECT 
    g.name AS genre,
    SUM(il.quantity) AS total_quantity
FROM
    genre g
        JOIN
    track t ON g.genreid = t.genreid
        JOIN
    invoiceline il ON t.trackid = il.trackid
GROUP BY g.name
ORDER BY total_quantity DESC
LIMIT 3;

-- 13. How does sales performance compare across different media types?
SELECT 
    m.name AS media_type,
    SUM(il.quantity) AS total_sales
FROM
    mediatype m
        JOIN
    track t ON m.mediatypeid = t.mediatypeid
        JOIN
    invoiceline il ON t.trackid = il.trackid
GROUP BY m.name
ORDER BY total_sales DESC;
